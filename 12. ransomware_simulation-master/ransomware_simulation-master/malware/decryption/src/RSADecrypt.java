package decryption;

import javax.crypto.Cipher;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.security.spec.X509EncodedKeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.PublicKey;

/**
 * Created by NetBeans IDE 8.1
 * Author: sheldonhuang
 * Date: Feb 26, 2016.
 */
public class RSADecrypt {
    
    static String userdesktop = WindowsUtils.getCurrentUserDesktopPath();
    
    public static void start(String[] args) throws Exception {



        File keyprvfile = new File(userdesktop+"\\prvKey");
        File clr = new File(userdesktop+"\\keystorefile.jce");
        File enc = new File(userdesktop+"\\keystorefile_encrypted.jce");
        
        if (!keyprvfile.exists() ){
            System.out.println("Private doesnot Exist");
        }
        if (!enc.exists() ){
            System.out.println("Encrypted Shared key doesnot exist");
        }
        if (!keyprvfile.exists() || !enc.exists()) {
            System.out.println("File not found");
            return;
        }

        //Read Private key from file keyprvfile
        FileInputStream fi = new FileInputStream(keyprvfile);
        byte[] key2 = new byte[(int) keyprvfile.length()];
        fi.read(key2);
        PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(key2);
        fi.close();

        // Initialise the RSA cipher with PRIVATE key
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        PrivateKey privKey = keyFactory.generatePrivate(privKeySpec);
        //Cipher cipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWithMD5AndMGF1Padding");
        cipher.init(Cipher.DECRYPT_MODE, privKey);

        //Open file for decryption
        fi = new FileInputStream(enc);
        long length = enc.length();
     
        byte[] ciphertext = new byte[(int) length];
        byte[] plaintext;
        FileOutputStream fo = new FileOutputStream(clr);
        fi.read(ciphertext);

        plaintext = cipher.doFinal(ciphertext);


        //Write decrypted data into the output file
        fo.write(plaintext);
        fo.close();

        System.out.println("AES Decryption Completed");


    }

}
