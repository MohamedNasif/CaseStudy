package decryption;

import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.BadPaddingException;
import java.security.*;
import java.security.cert.CertificateException;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Collection;
import java.util.Scanner;
import org.apache.commons.io.FileUtils;


/**
 * Created by NetBeans IDE 8.1
 * Author: sheldonhuang
 * Date: Feb 26, 2016.
 */
public class AESDecrypt {

    static KeyStore ks;
    static KeyStore.PasswordProtection password;
    static String alias ="";
    static String userdesktop = WindowsUtils.getCurrentUserDesktopPath();
    


   /*AesDecrypt Constructor:
     Initalise the AesDecrypt object.
     */
    public boolean init() throws NoSuchAlgorithmException, IOException, CertificateException, KeyStoreException {
        password = new KeyStore.PasswordProtection("changeme".toCharArray());
        File keyfile = new File("keystorefile.jce");

        //Check if the keystore file exists. Exit if keystore file is not found
        if (keyfile.exists()) {
            FileInputStream fis = new FileInputStream("keystorefile.jce");
            ks = KeyStore.getInstance("JCEKS");
            ks.load(fis, "changeme".toCharArray());
            fis.close();
            return true;
        } else {
            return false;
        }
    }

    /*Method:getkey(String alias)
    Get key from keystore with the given alias
    */
    public static Key getkey(String alias) throws NoSuchAlgorithmException, UnrecoverableKeyException, KeyStoreException {

        Key k = ks.getKey(alias, "changeme".toCharArray());

        return k;
    }

    public static void start(String[] args) throws Exception {
        alias = new Scanner(new File(userdesktop+"\\alias.txt")).useDelimiter("\\Z").next();
        AESDecrypt aesDec = new AESDecrypt();
        

        //Initiallise KeyStore
        FileInputStream fis = new FileInputStream(userdesktop+"\\keystorefile.jce");
        ks = KeyStore.getInstance("JCEKS");
        ks.load(fis, "changeme".toCharArray());
            fis.close();

        //Get Key
        Key mykey = AESDecrypt.getkey(alias);
        if (mykey == null) {
            System.out.println("Key alias not found in key store.");
            return;
        }

        // Create a cipher object and use the generated key to initialize it
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, mykey);

        //Read data from input file and store in byte array
        File dir = new File(userdesktop+"\\victim");
        String [] str = {"txt","TXT","RAR","rar","ZIP","zip","java","JAVA","mp4","MP4","webm","mp3","pdf","docx","doc","xlsx","xls","html","xlm","pptx","PNG","jpg"};
                //if(dir.isDirectory()) {
        Collection<File> files = FileUtils.listFiles(dir,str,true);
         for(File f:files){
                File enc = f;
               if (!enc.exists()) {
                   System.out.println("Files not found");
                   return;
               }
           FileInputStream fi = new FileInputStream(enc);
           long length = enc.length();
           byte[] ciphertext = new byte[(int) length];
           fi.read(ciphertext);
           fi.close();

           //Decrypt the text and write into output file 
           try {
               //Do the decryption
               byte[] plaintext = cipher.doFinal(ciphertext);
               //write the result into a file
               File clr = new File(f.getParent()+"/"+f.getName());
               FileOutputStream fo = new FileOutputStream(clr);
               fo.write(plaintext);
               fo.close();
               System.out.println("Decryption Completed");

           }catch (IllegalBlockSizeException e) {
            System.out.println("Incorrect key selected or key corrupted");
           }catch (BadPaddingException e) {
            System.out.println("Incorrect key selected or key corrupted");
           }
         }

    }


}
