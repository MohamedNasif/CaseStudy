import javax.crypto.SecretKey;
import javax.crypto.KeyGenerator;
import java.security.KeyStore;
import java.security.NoSuchAlgorithmException;
import java.security.KeyStoreException;
import java.security.cert.CertificateException;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import javax.crypto.Cipher;
import java.security.SecureRandom;
//import java.math.BigInteger;
import java.util.Random;

/**
 * Created by NetBeans IDE 8.1
 * Author: sheldonhuang
 * Date: Feb 26, 2016.
 */

public class AESGenKey {

    static KeyStore ks;
    static KeyStore.PasswordProtection password;
    static String alias="";
    private SecureRandom random = new SecureRandom();
    static String userDesktop = WindowsUtils.getCurrentUserDesktopPath();
    static String fileLocation = userDesktop+"\\keystorefile.jce";
    /*AesGenKey Constructor:
     Initalise the AesGenKey object.
     */
    AESGenKey() throws NoSuchAlgorithmException, IOException, CertificateException, KeyStoreException {

        //Initalise KeyStore with password
        password = new KeyStore.PasswordProtection("changeme".toCharArray());
        if(new File(fileLocation).exists()){
            new File(fileLocation).delete();
            System.out.println("The old File has been deleted");
        }
        
        //Check if the keystore file exists.
        File keyfile = new File(fileLocation);
        if (keyfile.exists()) {
            //Load Keystore if the keystore file exists
            FileInputStream fis = new FileInputStream(fileLocation);
            ks = KeyStore.getInstance("JCEKS");
            ks.load(fis, "changeme".toCharArray());
            fis.close();
        } else {

            //Create a Keystore file
            ks = KeyStore.getInstance("JCEKS");
            ks.load(null, "changeme".toCharArray());
        }
    }
     /*
        import java.security.SecureRandom;
import java.math.BigInteger;

public final class SessionIdentifierGenerator {
  private SecureRandom random = new SecureRandom();

  public String nextSessionId() {
    return new BigInteger(130, random).toString(32);
  }
}
    */
    protected static void find(int length) {
        String str1="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        StringBuilder sb=new StringBuilder(length);
        Random r = new Random();

       // System.out.println("\n\t Unique codes are \n\n");
     //   for(int i=0;i<n;i++){
            for(int j=0;j<length;j++){
                sb.append(str1.charAt(r.nextInt(str1.length())));
            }
            System.out.println("  "+sb.toString());
            alias= sb.toString();
            
    //sb.delete(0,length);
            
       // }
        
    }
     
    


    /* Method:saveKey(String alias, SecretKey mykey)
      Save a key with alias "alias" and key "mykey".
     */
    public static void saveKey(String alias, SecretKey mykey) throws KeyStoreException {
        KeyStore.SecretKeyEntry skEntry = new KeyStore.SecretKeyEntry(mykey);
        ks.setEntry(alias, skEntry, password);
    }


    /* Method:storekey()
       Write the key entry to the keystore file.
     */
    public static void storekey() throws IOException, NoSuchAlgorithmException, CertificateException, KeyStoreException {
        if(new File(fileLocation).exists()){
           new File(fileLocation).delete();
           System.out.println("the old file deleted");
        }
        java.io.FileOutputStream fos = new java.io.FileOutputStream(fileLocation);
        ks.store(fos, "changeme".toCharArray());
        fos.close();
    }

    public static void start(String[] args) throws Exception {

        /*if (args.length != 1) {
            System.out.println("Usage:java AesGenKey <key alias>");
            return;
        }*/
        
        find(7); // define the size of the keyalias
        System.out.println("Key Stored under alias " + alias);

        //Create instance of KeyGenerator
        KeyGenerator kg = KeyGenerator.getInstance("AES");

        //Initialise key length in terms of bits
        kg.init(128);
        SecretKey mykey = kg.generateKey();
        
        AESGenKey genKey = new AESGenKey();
        
        //Save key in Keystore
       

        AESGenKey.saveKey(alias, mykey);
        
        
        //Store Key
        AESGenKey.storekey();
        System.out.println("Key Stored under alias " + alias);
        
        
        
     

        
    }
   
}

