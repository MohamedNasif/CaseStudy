import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.security.KeyPairGenerator;
import java.security.KeyPair;

import java.security.GeneralSecurityException;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPrivateCrtKeySpec;
import java.security.spec.X509EncodedKeySpec;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;



/**
 * Created by NetBeans IDE 8.1
 * Author: sheldonhuang
 * Date: Feb 26, 2016.
 */
public class RSAEncrypt {
    static String userDesktop = WindowsUtils.getCurrentUserDesktopPath();
    public static void start(String[] args) throws Exception {
        RsaGenKey();
        RsaEncryptFile();  
        
    }


    public static void RsaGenKey() throws FileNotFoundException, NoSuchAlgorithmException, IOException, InvalidKeySpecException{

        File keypubfile = new File(userDesktop+"\\pubKey");;
        File keyprvfile = new File(userDesktop+"\\prvKey");



        // Create an RSA key pair
        System.out.println("Generating an RSA key...");
        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");


        keyPairGenerator.initialize(5000);
        KeyPair keyPair = keyPairGenerator.genKeyPair();
        System.out.println("Done generating the key.\n");

        //Save Public key in keypubfile
        FileOutputStream fs = new FileOutputStream(keypubfile);
        byte[] key1 = keyPair.getPublic().getEncoded();
        fs.write(key1);
        fs.close();

        //Save Private key in keyprvfile
        fs = new FileOutputStream(keyprvfile);
        byte[] key2 = keyPair.getPrivate().getEncoded();
        fs.write(key2);
        fs.close();
        
        
        System.out.println("\n-------------------------RSA Key Pair Information--------------------------");//To be added by students
        
	PrivateKey priv = keyPair.getPrivate();
        KeyFactory keyFac = KeyFactory.getInstance("RSA");
        RSAPrivateCrtKeySpec pkSpec = keyFac.getKeySpec(priv, RSAPrivateCrtKeySpec.class);
        System.out.println("Prime p : " + pkSpec.getPrimeP()+"\n");
        System.out.println("Prime q : " + pkSpec.getPrimeQ()+"\n");
        System.out.println("Modulus n : " + pkSpec.getModulus()+"\n");
        System.out.println("Private exponent d : " + pkSpec.getPrivateExponent()+"\n");
        System.out.println("Public exponent e : " + pkSpec.getPublicExponent()+"\n");

        System.out.println("\n--------------------------------END---------------------------------------");//To be added by students
        System.out.println();

        
    }

    
    public static void RsaEncryptFile() throws IOException, InvalidKeyException, NoSuchAlgorithmException, InvalidKeySpecException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException{
        File keypubfile = new File(userDesktop+"\\pubKey");
        File clr = new File(userDesktop+"\\keystorefile.jce");
        File enc = new File(userDesktop+"\\keystorefile_encrypt.jce");

        
        if (!keypubfile.exists() || !clr.exists()) {
            System.out.println("File not found");
            return;
        }
        //Read Public key from file keypubfile and encode key
        FileInputStream fi = new FileInputStream(keypubfile);
        byte[] key = new byte[(int) keypubfile.length()];
        fi.read(key);
        X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(key);
        fi.close();

        // Initialise the RSA cipher with PUBLIC key
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);
        Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWithMD5AndMGF1Padding");
        cipher.init(Cipher.ENCRYPT_MODE, pubKey);


        //Open clear file for encryption
        fi = new FileInputStream(clr);
        long length = clr.length();

        byte[] plaintext = new byte[(int) clr.length()];
        byte[] cipherText;
        FileOutputStream fo = new FileOutputStream(enc);
        fi.read(plaintext);
        cipherText = cipher.doFinal(plaintext);
        
        
        //Write data into outputfile
        fo.write(cipherText);
        fo.close();
        fi.close();
        
        
        
        


        
       
       

    }

}
